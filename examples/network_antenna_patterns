#!/usr/bin/env python
"""
Synopsis:

    Use various libraries to calculate the antenna patterns for a set of gravitational-wave antennas. We call them "antennas" because they respond to gravitational-waves in a similar way that electromagnetic antennas respond to light waves. In both cases, their response is directional, so rotating an antenna around will produce a different signal depending on its orientation relative to the source. 
    In the case of electromagnetic (dipole: https://en.wikipedia.org/wiki/Dipole_antenna) antennas, there is only the angle of the antenna (lengthwise) relative to the incoming waves (assumed to be planes transverse to a radial line with an origin at the source). There is an orientation in which the full wave is absorbed by the antenna, and an orientation (90 degrees rotated) which is "blind" to the wave.
    In the case of gravitational-wave (quadrupole) antennas, there are two angles to take into account (because you have two antennas overlaid upon each other --- the orthogonal arms of the interferometer). Given this, the response is more complicated, and requires more than one angle. There is no one angle in which the antenna is completely "blind" to a gravitational wave, but some orientations are much better than others. This is because there are two components to a gravitational-wave (called polarizations) which both have different geometrical responses. Of course, we can't rotate gravitational-wave antennas, they are large instruments which are not mobile. However, the sources of gravitational-waves are astrophysical in origin, and so we actually move relative to them! This is because the earth is rotating around its own axis as well as the sun.

    Two orientation angles (all relative to a interferometer fixed coordinate system where the x-y plane is fixed to the instrument arms and z points orthogonally "up"):
    theta/declination/altitude: angle created from the ground to the source
    phi/right ascension/azimuth: angle created from a given reference arm to the source.
    
    There is an additional angle (called psi, or the polarization angle) which defines the orientation of the polarization components relative to the instrument x-y plane. This is effectively how one would rotate the plane of the incoming gravitational-wave to line up maximally with the orientation of the interferometer. Since it tends to complicate things needlessly, we'll always consider this angle to be zero. In reality, it can and does have an effect on the geometrical response.

    For short signals, we only have to consider the instantaneous orientation of the interferometer relative to the source in the sky -- the earth doesn't move fast enough to matter. For waves which don't turn on/shut off, both of the motions are important.

    References:
        Anderson and Creighton: 6.1.10 and A.1
        Maggiore (2008): chapter 7.8 and Table 7.1

    See also:
        https://dcc.ligo.org/public/0106/T1300666/003/Whelan_geometry.pdf
"""

import sys

import matplotlib
matplotlib.use("agg")
from matplotlib import pyplot
from mpl_toolkits.basemap import Basemap
import matplotlib.patheffects as PathEffects

import numpy

def ra_dec_from_loc(x, y, z):
    r = numpy.sqrt(x**2+y**2+z**2)
    th = numpy.arcsin(z/r)*180/numpy.pi
    ph = numpy.arctan2(y, x)*180/numpy.pi
    return ph, th

def set_effect(text):
    text.set_path_effects([
        PathEffects.Stroke(linewidth=3, foreground="white"),
        PathEffects.Normal()])

try:
    from pylal import antenna, inject
except ImportError:
    sys.exit("Pylal not present, please install")

# Calculate the "optimal" antenna pattern --- directly overhead and aligned with
# the instrument
inst = ("H1", "L1", "V1", "T1", "G1")

lat_net, lon_net = {}, {}
for det, det_obj in inject.cached_detector_by_prefix.iteritems():
    if det not in inst:
        continue
    lon_net[det], lat_net[det] = ra_dec_from_loc(*det_obj.location)
    print "Instrument %s:\n\tLatitude: %f\n\tLongitude: %f" % \
        (det, lat_net[det], lon_net[det])
print ""

# NOTE: We will use the Hanford instrument as our reference

# Ingredients we'll need:
# Global positioning satellite (GPS) time --- this is a standard reference for
# time between widely separated objects. We use it because it gives us a
# reference which includes all sorts of synchronization effects
time = 999993615 # midnight UTC
time += 1*3600 # one hour to account for DST
# Declination -- declinations are defined relative to the earth's axis, so we'll
# need to find the "declination" of the intstrument (Hanford) in order to get to a
# local frame of reference
decl = lat_net["H1"]
# Right ascension -- this is relative to the prime meridian, so we'll need to
# find the "right ascension" of the intstrument (Hanford). This is trickier,
# because the Earth is rotating, and so the source is 'moving' across the sky
# relative to the interferometer. The trick is to pick a time (above) such that
# the right ascension of the source matches the longitude of the intstrument ---
# that's the additional bit added to the time above
# NOTE: West means negative
right_asc = lon_net["H1"]

# Inclination -- this is only important for a specific set of sources. We'll set
# it here to be maximal. For the curious, this means that the source (in this case, a binary) is 'face on' as opposed to 'edge on'.
incl = 0

# Polarization -- recall that we are setting this so that the wave's x-y axes are aligned with the instrument's x-y axes.
polar = 0

# This is what happens when we add more and more instruments to the network.
# Note this is what would happen if we added *identical* intstrument to the
# network. Livingston and Hanford are to a high degree, very similar to each
# other. However, other intstruments have different sensitivities to a source at
# the same distance of a source, and so they might not "even out" the map as
# much as these plots would indicate. However, we expect by 2020 that most of
# the instruments will be of equivalent sensitivity, and so these maps would be
# more representive.

from scipy import optimize
# This transformation is called the dominant polarization frame. It's not useful
# in this discussion, but shows up in GW data analysis, and we do it here to be
# consistent with those results 10.1103/PhysRevD.83.102001 (http://journals.aps.org/prd/abstract/10.1103/PhysRevD.83.102001)
def dpf(psi, ant):
    cpsi, spsi = numpy.cos(psi), numpy.sin(psi)
    return ant*(spsi**2-cpsi**2) - cpsi*spsi

sm = numpy.zeros((360, 360))
sm_p = numpy.zeros((360, 360))
sm_c = numpy.zeros((360, 360))
theta = numpy.linspace(-90, 89, 360)
phi = numpy.linspace(0, 359, 360)
for t, th in enumerate(theta):
    for p, ph in enumerate(phi):
        tmp_fp, tmp_fx = [], []
        for d in inst:
            fp, fx, _, _ = antenna.response(time, ph, th, 0, 0, "degree", d)
            tmp_fp.append(fp)
            tmp_fx.append(fx)

        sm_p[p, t] = numpy.dot(tmp_fp, tmp_fp)
        sm_c[p, t] = numpy.dot(tmp_fx, tmp_fx)

        #const = numpy.dot(tmp_fp, tmp_fx) / (sm_c[p, t] - sm_p[p, t])
        #psi_dpf = optimize.root(dpf, 0, args=(const,))['x']
        # See http://arxiv.org/pdf/0908.3665v2.pdf eqn 2.23
        psi_dpf = 0.25*numpy.arctan2(2*numpy.dot(tmp_fp, tmp_fx), (sm_c[p, t] - sm_p[p, t]))

        tmp_fp, tmp_fx = numpy.array(tmp_fp), numpy.array(tmp_fx)
        tmp_fp, tmp_fx = numpy.cos(psi_dpf)*tmp_fp + \
            numpy.sin(psi_dpf)*tmp_fx, \
            -numpy.sin(psi_dpf)*tmp_fp + \
            numpy.cos(psi_dpf)*tmp_fx
        sm_p[p, t] = numpy.dot(tmp_fp, tmp_fp)
        sm_c[p, t] = numpy.dot(tmp_fx, tmp_fx)
###########

pp, tt = numpy.meshgrid(phi, theta)

sm = numpy.sqrt(sm_p+sm_c)/numpy.sqrt(len(inst))

pyplot.figure()
m = Basemap(projection="moll", lon_0=0)
# Enable to make it look more like the PRD paper
#m = Basemap(projection='cyl', llcrnrlat=-80,urcrnrlat=80,llcrnrlon=-180,urcrnrlon=180,lat_ts=20)
m.pcolormesh(pp, tt, sm.T, latlon=True, antialiased=True, vmin=0, vmax=1)
m.colorbar()
m.drawcoastlines()
for d in inst:
    mp_ra, mp_dc = m(lon_net[d], lat_net[d])
    text = pyplot.text(mp_ra, mp_dc, d[0], color='black')
    set_effect(text)
pyplot.title("$\sqrt{F_+^2 + F_{\\times}^2}$")

pyplot.suptitle("Network Antenna Pattern for H1G1L1T1V1")
pyplot.savefig("skymap_all_inst.png")
